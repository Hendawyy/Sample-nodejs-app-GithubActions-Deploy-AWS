name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      terraform_operation:
        description: 'Action to perform: [apply, destroy]'
        required: true
        default: 'apply'
        type: choice
        options:
          - 'apply'
          - 'destroy'

jobs:
  Linter-run:
    name: Run Linter
    runs-on: ubuntu-latest

    steps:
      - name: Super-Linter
        uses: super-linter/super-linter@v5.7.2

  Terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    outputs:
      terraform_state: ${{ steps.save_tf_state.outputs.state_file }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'

    steps:
      - name: Checkout Terraform
        uses: actions/checkout@v4.1.1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.9

      - name: Initialize Terraform
        id: init
        run: |
          cd Terraform
          terraform init

      - name: Terraform Format
        id: format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: |
          cd Terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd Terraform
          terraform plan -out=tfplan

      - name: Save Terraform state file
        id: save_tf_state
        run: |
          cd Terraform
          terraform show -json > tfstate.json
          echo "::set-output name=state_file::tfstate.json"

      - name: Terraform Apply
        if: ${{ github.event.inputs.terraform_operation == 'apply' || !github.event.inputs.terraform_operation }}
        run: |
          cd Terraform
          terraform apply --auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          cd Terraform
          terraform destroy --auto-approve

  Build-and-Push-to-ECR:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: Terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        run: echo ${{ secrets.AWS_ACCESS_KEY_ID }} | docker login -u AWS --password-stdin 355001659877.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        run: docker build -t my-node-img .

      - name: Tag Docker image
        run: docker tag my-node-img:latest 355001659877.dkr.ecr.us-east-1.amazonaws.com/my-ecr-repo:latest

      - name: Push Docker image to ECR
        run: docker push 355001659877.dkr.ecr.us-east-1.amazonaws.com/my-ecr-repo:latest

  Deploy-to-EKS:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: Build-and-Push-to-ECR

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name nawy-eks-cluster --region ${{ env.AWS_REGION }}

      - name: Apply Kubernetes
        run: kubectl apply -f Kubernetes/
        shell: bash

      - name: Try the cluster
        run: |
          kubectl get deployment -n nodeaws
          kubectl get pods -n nodeaws -owide
          kubectl get svc -n nodeaws -owide
          sleep 100
          kubectl get deployment -n nodeaws
          kubectl get pods -n nodeaws -owide
          kubectl get svc -n nodeaws -owide
        shell: bash
